package com.bioxx.tfc2.World.Layers;


public class GenLayerZoomNormal extends GenLayerTFC
{
	public GenLayerZoomNormal(long seed, GenLayerTFC par3GenLayer)
	{
		super(seed);
		super.parent = par3GenLayer;
	}

	/**
	 * Returns a list of integer values generated by this layer. These may be interpreted as temperatures, rainfall
	 * amounts, or biomeList[] indices based on the particular GenLayer subclass.
	 */
	@Override
	public int[] getInts(int xPos, int zPos, int xSize, int zSize)
	{
		int xCoord = xPos >> 1;
		int zCoord = zPos >> 1;
		//2x Zoom + 1 cell padding for all edges
		int newXSize = (xSize >> 1) + 2;
		int newZSize = (zSize >> 1) + 2;
		int[] parentCache = this.parent.getInts(xCoord, zCoord, newXSize, newZSize);
		//2x ZoomOut + 1 cell padding for each side
		int width = newXSize - 1 << 1;
		int height = newZSize - 1 << 1;

		int[] out = new int[width * height];
		int l2;

		for (int z = 0; z < newZSize - 1; ++z)
		{
			//We're working in zoomed coordinates but we need to translate back to unzoomed
			l2 = (z << 1) * width;

			for (int x = 0; x < newXSize - 1; ++x)
			{
				this.initChunkSeed(x + xCoord << 1, z + zCoord << 1);
				int thisID = parentCache[x + 1 + (z + 1) * newXSize];
			}
		}

		int[] outCache = new int[xSize * zSize];

		for (int zoom = 0; zoom < zSize; ++zoom)
		{
			int srcPos = (zoom + (zPos & 1)) * width + (xPos & 1);
			System.arraycopy(out, srcPos, outCache, zoom * xSize, xSize);
		}

		return outCache;
	}

	/**
	 * Chooses one of the two inputs randomly.
	 */
	protected int choose(int par1, int par2)
	{
		return this.nextInt(2) == 0 ? par1 : par2;
	}

	protected int choose4(int id0, int id1, int id2, int id3)
	{
		if (id1 == id2 && id2 == id3)
			return id1;
		else if (id0 == id1 && id0 == id2)
			return id0;
		else if (id0 == id1 && id0 == id3)
			return id0;
		else if (id0 == id2 && id0 == id3)
			return id0;
		else if (id0 == id1 && id2 != id3)
			return id0;
		else if (id0 == id2 && id1 != id3)
			return id0;
		else if (id0 == id3 && id1 != id2)
			return id0;
		else if (id1 == id0 && id2 != id3)
			return id1;
		else if (id1 == id2 && id0 != id3)
			return id1;
		else if (id1 == id3 && id0 != id2)
			return id1;
		else if (id2 == id0 && id1 != id3)
			return id2;
		else if (id2 == id1 && id0 != id3)
			return id2;
		else if (id2 == id3 && id0 != id1)
			return id2;
		else if (id3 == id0 && id1 != id2)
			return id2;
		else if (id3 == id1 && id0 != id2)
			return id2;
		else if (id3 == id2 && id0 != id1)
			return id2;
		else
		{
			int rand = this.nextInt(4);
			return rand == 0 ? id0 : (rand == 1 ? id1 : (rand == 2 ? id2 : id3));
		}
	}

	public static GenLayerTFC magnify(long par0, GenLayerTFC par2GenLayer, int par3)
	{
		Object var4 = par2GenLayer;
		for (int var5 = 0; var5 < par3; ++var5)
			var4 = new GenLayerZoomNormal(par0 + var5, (GenLayerTFC) var4);
		return (GenLayerTFC) var4;
	}
}
