package com.bioxx.tfc2.World.Layers;

import net.minecraft.world.gen.layer.IntCache;

public class GenLayerAddIslandTFC extends GenLayerTFC
{
	public GenLayerAddIslandTFC(long par1, GenLayerTFC par3GenLayer)
	{
		super(par1);
		this.parent = (GenLayerTFC) par3GenLayer;
	}

	/**
	 * Returns a list of integer values generated by this layer. These may be interpreted as temperatures, rainfall
	 * amounts, or biomeList[] indices based on the particular GenLayer subclass.
	 */
	@Override
	public int[] getInts(int xPos, int zPos, int xMax, int zMax)
	{
		int parentXPos = xPos - 1;
		int parentZPos = zPos - 1;
		int parentXMax = xMax + 2;
		int parentZMax = zMax + 2;
		int[] parentArray = this.parent.getInts(parentXPos, parentZPos, parentXMax, parentZMax);
		int[] outArray = IntCache.getIntCache(xMax * zMax);

		for (int x = 0; x < zMax; ++x)
		{
			for (int z = 0; z < xMax; ++z)
			{
				int downLeft = parentArray[z + 0 + (x + 0) * parentXMax];
				int upLeft = parentArray[z + 2 + (x + 0) * parentXMax];
				int downRight = parentArray[z + 0 + (x + 2) * parentXMax];
				int upRight = parentArray[z + 2 + (x + 2) * parentXMax];
				int thisCell = parentArray[z + 1 + (x + 1) * parentXMax];
				this.initChunkSeed(z + xPos, x + zPos);

				if (thisCell == 0 && (downLeft != 0 || upLeft != 0 || downRight != 0 || upRight != 0))
				{
					int var18 = 1;
					int var19 = 1;

					if (downLeft != 0 && this.nextInt(var18++) == 0)
						var19 = downLeft;

					if (upLeft != 0 && this.nextInt(var18++) == 0)
						var19 = upLeft;

					if (downRight != 0 && this.nextInt(var18++) == 0)
						var19 = downRight;

					if (upRight != 0 && this.nextInt(var18++) == 0)
						var19 = upRight;

					if (this.nextInt(3) == 0)
						outArray[z + x * xMax] = var19;
					else
						outArray[z + x * xMax] = 0;
				}
				else if (thisCell > 0 && (downLeft == 0 || upLeft == 0 || downRight == 0 || upRight == 0))
				{
					if (this.nextInt(5) == 0)
						outArray[z + x * xMax] = 0;
					else
						outArray[z + x * xMax] = thisCell;
				}
				else
				{
					outArray[z + x * xMax] = thisCell;
				}
			}
		}
		return outArray;
	}
}
